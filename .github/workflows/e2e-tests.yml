name: E2E Tests
on:
  schedule:
    - cron: '0 0 * * *'
  push:
  workflow_dispatch:

jobs:
  record:
    runs-on: ubuntu-latest
    outputs:
      recordDuration: ${{steps.end.outputs.recordDuration}}
      uploadDuration: ${{steps.end.outputs.uploadDuration}}
    steps:
      - uses: actions/checkout@v3
      - run: npm ci && npm ci --prefix cli
      - run: npm run bundle
      - run: npm run e2e-replay
        env:
          RECORD_ALL_CONTENT: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata
          RECORD_REPLAY_TEST_METRICS: 1
          RECORD_REPLAY_WEBHOOK_URL: ${{ secrets.RECORD_REPLAY_WEBHOOK_URL }}
          # delete this once it's enabled by default
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          # delete this once it's enabled by default
          REPLAY_DISABLE_SOURCEMAP_COLLECTION: 1
      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
      - name: Set upload start
        if: always()
        id: uploadStart
        run: echo "time=`date +%s`" >> $GITHUB_OUTPUT
      - name: Upload replays
        if: ${{ always() }}
        uses: replayio/action-upload@v0.4.3
        with:
          api-key: rwk_CMx7Nd43nfKU5j6pDboS16IHDykYDIfIBMoejo6GofG
          public: true
      - name: Set duration in output
        if: always()
        id: end
        run: |
          echo "recordDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "uploadDuration=$((`date +%s` - ${{ steps.uploadStart.outputs.time }}))" >> $GITHUB_OUTPUT
  no-record:
    runs-on: ubuntu-latest
    outputs:
      noRecordDuration: ${{steps.end.outputs.noRecordDuration}}
    steps:
      - uses: actions/checkout@v3
      - run: npm ci && npm ci --prefix cli
      - run: npm run bundle
      - run: npm run e2e-replay
        env:
          RECORD_ALL_CONTENT: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata
          RECORD_REPLAY_DRIVER: /tmp/not-here
          RECORD_REPLAY_TEST_METRICS: 1
          RECORD_REPLAY_WEBHOOK_URL: ${{ secrets.RECORD_REPLAY_WEBHOOK_URL }}
      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
      - name: Set duration in output
        if: always()
        id: end
        run: echo "noRecordDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT
  original:
    runs-on: ubuntu-latest
    outputs:
      originalDuration: ${{steps.end.outputs.originalDuration}}
    steps:
      - uses: actions/checkout@v3
      - run: npm ci && npm ci --prefix cli
      - run: npm run bundle
      - name: Set test start
        if: always()
        id: start
        run: echo "time=`date +%s`" >> $GITHUB_OUTPUT
      - run: npm run e2e
      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
      - name: Set duration in output
        id: end
        if: always()
        run: echo "originalDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT
  upload-benchmarks:
    name: Upload benchmarks
    runs-on: ubuntu-latest
    needs: [record, no-record, original]
    if: always()
    steps:
      - run: |
          echo "Record Duration: ${{ needs.record.outputs.recordDuration }}"
          echo "No Record Duration: ${{ needs.no-record.outputs.noRecordDuration }}"
          echo "Original Duration: ${{ needs.original.outputs.originalDuration }}"
          echo "Upload Duration: ${{ needs.record.outputs.uploadDuration }}"
      - name: Fetch API Data ðŸ“¦
        uses: JamesIves/fetch-api-data-action@v2
        # Don't upload metrics for pull requests, so our stats are clean
        if: ${{ github.ref_name == 'master' }}
        with:
          endpoint: 'https://telemetry.replay.io'
          configuration: '{ "method": "POST", "body": {"event": "Webhook", "source": "metrics", "name": "action-finished-2", "project": "redoc", "originalDuration": "${{ needs.original.outputs.originalDuration }}", "recordDuration": "${{ needs.record.outputs.recordDuration }}", "noRecordDuration": "${{ needs.no-record.outputs.noRecordDuration }}", "uploadDuration": "${{ needs.record.outputs.uploadDuration }}"} }'
